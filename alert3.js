//私たちは必要なだけ文をコードに含めることができます。文はセミコロンで区切ることができます。
//たとえば、これはメッセージを2つに分けます:
alert('Hello'); alert('World');

//通常、それぞれの文は別の行に書かれます – これによりコードの可読性が向上します。
alert('Hello');
alert('World');

//改行がある場合は、ほとんどの場合セミコロンを省略できます。
//これも動作します:
alert('Hello')
alert('World')

// ここでJavaScriptは、改行を “暗黙” のセミコロンと解釈します。 これは自動セミコロン挿入と呼ばれます。
// ほとんどのケースで改行はセミコロンを意味します。しかし “ほとんどのケース” は “いつも” ではありません!
// これは改行はセミコロンを意味しないケースです、例えば:
alert(3 +
    1
    + 2);
// このコードは 6 を出力します、なぜなら JavaScript はセミコロンを挿入しないからです。もし行の終わりがプラス "+" で終わっている場合、直感的には “不完全な表現” であり、セミコロンが必要ないのは明らかです。このケースでは、それは意図した通りに動作します。  
// しかしJavaScriptが、本当に必要なときにセミコロンを想定 “し損なう” ケースがあります。
// このようなケースで発生するエラーは検出と修正が非常に難しいです。

//JavaScriptでは角括弧 [...] の前にはセミコロンを想定しません。そのため、セミコロンは自動挿入されないので最初の例のコードは1つの文として扱われます。 エンジンは次のように解釈しています:

 alert("There will be an error")[1, 2].forEach(alert)

//改行によって文が分割されるとしてもセミコロンを置くことを推奨します。
//このルールはコミュニティで広く採用されています。改めて留意しましょう
// – ほとんどの場合、セミコロンは除くことが 可能 です。しかし、特に初心者はセミコロンを使う方が安全です。

// この行全体がコメントになります。
alert('Hello');

alert('World'); // このコメントは文の後に続いています。



//複数行のコメントはスラッシュとアスタリスク /* で始まり、アスタリスクとスラッシュ */ で終わります。
//このようになります:

 /* 2つのメッセージを含む例。
これは複数行のコメントです。
*/
alert('Hello');
alert('World');
//コメントの内容は無視されます、そのため、/* … */ の中にコードをおいても実行されません。

//これはコードの一部を一時的に無効にしたいときに便利です:

 /* コードのコメントアウト
alert('Hello');
*/
alert('World');


// コードにコメントするのを躊躇わないでください。
// コメントはコード規模を増加させますが、それは全く問題ではありません。プロダクションサーバへリリースする前にコードを minify する多くのツールがあります。それらはコメントを除去するので、実行されるスクリプトには現れません。そのため、コメント書くことによるネガティブな影響は全くありません。
// さらにこのチュートリアルでは、より良いコメントの書き方を説明するチャプター コーディングスタイル もあります。